{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleAdd","habits","map","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5ddce8d.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Habit extends PureComponent {\n  componentDidMount() {}\n  // UI상에 등록이 되었을때\n\n  componentWillUnmount() {}\n  // UI상에서 없어질때\n\n  // state = {\n  //   count: 0,\n  //   // 하나의 습관을 보여줄 수 있는 가장 작은 단위의 컴포넌트\n  //   // 자 이제는 부모 컴포넌트로부터 prop으로 전달 받은 습관의 데이터를 보여주기만 하는\n  //   // 컴포넌트 이기 때문에 이 컴포넌트 안에 자체적으로 state를 가지고 있을 필요는 전혀 없다.\n  // };\n\n  handleIncrement = () => {\n    this.props.onIncrement(this.props.habit);\n    // state 오브젝트 안에 있는 count를 증가 한뒤 state를 업데이트 해야 함.\n    // this.state.count+=1; 이렇게 오브젝트 안에 있는 데이터를 업데이트 하게 되면\n    // 리액트는 업데이트 됐는지 안됐는지 모름 그렇기 때문에 리액에서 제공하는\n    // 스테이트 업데이트 할때는 setState 쓰기\n    // this.setState({ count: this.state.count + 1 });\n  };\n\n  handleDecrement = () => {\n    this.props.onDecrement(this.props.habit);\n    // const count = this.state.count - 1;\n    // this.setState({ count: count < 0 ? 0 : count });\n    // 0보다 작으면 그냥 0을 출력하고 아니면 그냥 출력해\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.habit);\n  };\n\n  render() {\n    const { name, count } = this.props.habit;\n\n    // 이렇게 하게 되면 자동으로 여기 안에 있는 데이터가 name과 count라는\n    // 대신에 동일한 이름을 써야돼요\n    // habit 안에 있는 name과 count라는 이 각각의 데이터들이 여기로 옵니다\n    return (\n      <li className='habit'>\n        <span className='habit-name'>{name}</span>\n        <span className='habit-count'>{count}</span>\n        <button className='habit-button habit-increase' onClick={this.handleIncrement}>\n          <i className='fas fa-plus-square'></i>\n        </button>\n        <button className='habit-button habit-decrease' onClick={this.handleDecrement}>\n          <i className='fas fa-minus-square'></i>\n        </button>\n        <button className='habit-button habit-delete' onClick={this.handleDelete}>\n          <i className='fas fa-trash'></i>\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default Habit;\n","import React, { memo } from 'react';\n\nconst HabitAddForm = memo(props => {\n  const formRef = React.createRef();\n  const inputRef = React.createRef();\n  const onSubmit = event => {\n    event.preventDefault();\n    // 브라우저의 기본 기능을 취소해준다.\n    const name = inputRef.current.value;\n    name && props.onAdd(name);\n    // this.inputRef.current.value = '';\n    formRef.current.reset();\n  };\n  return (\n    <form ref={formRef} className='add-form' onSubmit={onSubmit}>\n      <input ref={inputRef} type='text' className='add-input' placeholder='Habit' />\n      <button className='add-button'>Add</button>\n    </form>\n  );\n});\n\nexport default HabitAddForm;\n","import React, { Component } from 'react';\nimport Habit from './habit';\nimport HabitAddForm from './habitAddForm';\n\nclass Habits extends Component {\n  handleIncrement = habit => {\n    this.props.onIncrement(habit);\n  };\n\n  handleDecrement = habit => {\n    this.props.onDecrement(habit);\n  };\n\n  handleDelete = habit => {\n    this.props.onDelete(habit);\n  };\n\n  handleAdd = name => {\n    this.props.onAdd(name);\n  };\n\n  render() {\n    return (\n      <>\n        <HabitAddForm onAdd={this.handleAdd} />\n        <ul>\n          {this.props.habits.map(habit => (\n            <Habit\n              key={habit.id}\n              habit={habit}\n              onIncrement={this.handleIncrement}\n              onDecrement={this.handleDecrement}\n              onDelete={this.handleDelete}\n            />\n            // habit 컴포넌트로 전달해서 이렇게 보여주는 것이다.\n          ))}\n        </ul>\n        <button className='habits-reset' onClick={this.props.onReset}>\n          Reset All\n        </button>\n      </>\n    );\n  }\n}\n\nexport default Habits;\n","import React, { PureComponent } from 'react';\n\nclass Navbar extends PureComponent {\n  render() {\n    return (\n      <nav className='navbar'>\n        <i className='navbar-logo fas fa-leaf'></i>\n        <span>Habit Tracker</span>\n        <span className='navbar-count'>{this.props.totalCount}</span>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n    // 습관들이라는 배열을 가지고 있고 각각의 습관들을 아래에\n  };\n  handleIncrement = habit => {\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n    // spread operator\n    // 이 habits라는 배열안에 있는 아이템들을 하나하나씩\n    // 새로운 배열 안으로 복사해 오는 것을 말합니다!\n    this.setState({ habits: habits });\n    // state 오브젝트 안에 있는 count를 증가 한뒤 state를 업데이트 해야 함.\n    // this.state.count+=1; 이렇게 오브젝트 안에 있는 데이터를 업데이트 하게 되면\n    // 리액트는 업데이트 됐는지 안됐는지 모름 그렇기 때문에 리액에서 제공하는\n    // 스테이트 업데이트 할때는 setState 쓰기\n    // this.setState({ count: this.state.count + 1 });\n  };\n\n  handleDecrement = habit => {\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    this.setState({ habits: habits });\n    // const count = this.state.count - 1;\n    // this.setState({ count: count < 0 ? 0 : count });\n    // 0보다 작으면 그냥 0을 출력하고 아니면 그냥 출력해\n  };\n\n  handleDelete = habit => {\n    const habits = this.state.habits.filter(item => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = name => {\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map(habit => {\n      if (habit.count !== 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar totalCount={this.state.habits.filter(item => item.count > 0).length} />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  // React DOM이라는 라이브러리를 이용해서\n  // 우리의 인덱스에 있는 root라는 아이디를 가진 요소와\n  // 우리의 최상위의 Component를 연결해주는 작업을 했습니다.\n);\n"],"sourceRoot":""}